import open3d as o3d
import numpy as np
from voxel_grid import *
from point_cloud_FoV_utils import *

# trajectory_index = 0
image_width, image_height = np.array([1920, 1080])
# generate graph voxel grid features
voxel_size = int(128)
min_bounds = np.array([-251,    0, -241]) 
max_bounds = np.array([ 262, 1023,  511])

edge_prefix = str(voxel_size)
# get the graph max and min bounds
# graph_max_bound,graph_min_bound,graph_voxel_grid_integer_index_set,graph_voxel_grid_index_set,graph_voxel_grid_coords,original_index_to_integer_index = voxelizetion_para(
    # voxel_size=voxel_size, min_bounds=min_bounds, max_bounds=max_bounds)
results = voxelizetion_para(voxel_size=voxel_size, min_bounds=min_bounds, 
                            max_bounds=max_bounds)
graph_max_bound = results['graph_voxel_grid_max_bound']
graph_min_bound = results['graph_voxel_grid_min_bound']
graph_voxel_grid_integer_index_set = results['graph_voxel_grid_integer_index_set']
graph_voxel_grid_index_set = results['graph_voxel_grid_index_set']
graph_voxel_grid_coords = results['graph_voxel_grid_coords']
graph_voxel_grid_coords_array = results['graph_voxel_grid_coords_array']
original_index_to_integer_index = results['original_index_to_integer_index']

pred_TLR = np.array([[0.0864, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.5448, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.9507, 0.1168, 0.0000, 0.0000],
        [0.0000, 0.0000, 1.0000, 0.6400, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 0.9977, 0.1986, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.6684, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.8209, 0.0250],
        [0.0000, 0.0000, 1.0000, 1.0000, 0.6323, 0.0000, 0.0000, 0.0000],
        [0.0771, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.5813, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.9709, 0.1199, 0.0000, 0.0000],
        [0.0000, 0.0000, 1.0000, 0.6410, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 0.9887, 0.1838, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.7185, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.2225],
        [0.0000, 0.0000, 1.0000, 1.0000, 0.9971, 0.3135, 0.0000, 0.0000],
        [0.0894, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.5455, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.9649, 0.1297, 0.0000, 0.0000],
        [0.0000, 0.0000, 1.0000, 0.6452, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 0.9930, 0.1775, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.7218, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.9976, 0.2982],
        [0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.7681, 0.0000, 0.0000],
        [0.0905, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.5444, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.9704, 0.1122, 0.0000, 0.0000],
        [0.0000, 0.0000, 1.0000, 0.6106, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 0.9846, 0.1911, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.7413, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.2559],
        [0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.7338, 0.0000, 0.0000],
        [0.0998, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.5117, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.9718, 0.1103, 0.0000, 0.0000],
        [0.0000, 0.0000, 1.0000, 0.6388, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 0.9899, 0.1932, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.7370, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.2772],
        [0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.4390, 0.0000, 0.0000]])
pred_graph =np.array ([[0.4724, 0.2713, 0.1361, 0.0399, 0.0145, 0.0070, 0.7171, 0.3499],
        [0.1645, 0.0528, 0.0195, 0.0100, 0.8420, 0.4878, 0.1820, 0.0600],
        [0.0233, 0.0133, 0.8923, 0.6922, 0.2117, 0.0679, 0.0287, 0.0182],
        [0.9317, 0.8252, 0.3113, 0.0776, 0.0359, 0.0219, 0.9659, 0.9321],
        [0.6834, 0.1350, 0.0425, 0.0228, 0.9836, 0.9685, 0.8448, 0.3686],
        [0.0611, 0.0249, 0.9882, 0.9779, 0.8991, 0.6436, 0.0708, 0.0268],
        [0.4520, 0.2935, 0.1361, 0.0405, 0.0145, 0.0068, 0.6760, 0.3478],
        [0.1759, 0.0502, 0.0186, 0.0097, 0.8311, 0.4924, 0.2048, 0.0554],
        [0.0224, 0.0132, 0.8852, 0.6832, 0.2507, 0.0679, 0.0257, 0.0156],
        [0.9353, 0.8341, 0.3959, 0.1111, 0.0331, 0.0188, 0.9704, 0.9312],
        [0.7160, 0.2198, 0.0428, 0.0205, 0.9854, 0.9715, 0.8714, 0.4270],
        [0.0576, 0.0227, 0.9905, 0.9823, 0.9189, 0.6920, 0.0673, 0.0253],
        [0.4712, 0.3063, 0.1552, 0.0468, 0.0171, 0.0078, 0.7042, 0.3540],
        [0.2076, 0.0591, 0.0200, 0.0097, 0.8149, 0.4786, 0.2338, 0.0653],
        [0.0218, 0.0120, 0.8721, 0.7032, 0.2595, 0.0957, 0.0225, 0.0128],
        [0.9350, 0.8410, 0.3654, 0.1526, 0.0282, 0.0143, 0.9706, 0.9305],
        [0.7218, 0.2670, 0.0436, 0.0194, 0.9865, 0.9710, 0.8759, 0.4761],
        [0.0684, 0.0218, 0.9916, 0.9828, 0.9188, 0.6146, 0.0661, 0.0253],
        [0.4396, 0.2600, 0.1550, 0.0451, 0.0150, 0.0061, 0.6834, 0.3079],
        [0.1998, 0.0632, 0.0187, 0.0079, 0.8219, 0.4844, 0.2319, 0.0983],
        [0.0213, 0.0113, 0.8783, 0.7209, 0.2764, 0.1361, 0.0237, 0.0125],
        [0.9464, 0.8609, 0.4174, 0.2018, 0.0349, 0.0160, 0.9760, 0.9410],
        [0.7280, 0.2787, 0.0591, 0.0185, 0.9884, 0.9731, 0.8677, 0.5019],
        [0.0708, 0.0217, 0.9927, 0.9827, 0.9025, 0.4818, 0.0717, 0.0244],
        [0.4303, 0.2529, 0.1482, 0.0594, 0.0152, 0.0059, 0.6989, 0.3199],
        [0.2026, 0.0909, 0.0191, 0.0080, 0.8244, 0.5011, 0.2449, 0.1292],
        [0.0231, 0.0109, 0.8835, 0.7448, 0.2902, 0.1568, 0.0287, 0.0134],
        [0.9495, 0.8684, 0.4430, 0.2067, 0.0473, 0.0178, 0.9771, 0.9436],
        [0.7354, 0.2660, 0.0647, 0.0183, 0.9887, 0.9719, 0.8548, 0.4133],
        [0.0722, 0.0231, 0.9923, 0.9816, 0.8948, 0.3626, 0.0742, 0.0254]])
ground_truth = np.array([[1.0000, 0.9101, 0.0123, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.2306, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.5693, 0.0000],
        [0.0000, 0.0000, 1.0000, 1.0000, 0.8787, 0.0093, 0.0000, 0.0000],
        [1.0000, 1.0000, 1.0000, 0.1737, 0.0000, 0.0000, 1.0000, 1.0000],
        [1.0000, 0.4951, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.8773],
        [0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.8346, 0.0049, 0.0000],
        [1.0000, 0.8904, 0.0068, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.2128, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.5455, 0.0000],
        [0.0000, 0.0000, 1.0000, 1.0000, 0.8952, 0.0000, 0.0000, 0.0000],
        [1.0000, 1.0000, 1.0000, 0.1887, 0.0000, 0.0000, 1.0000, 1.0000],
        [1.0000, 0.5056, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.8010],
        [0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.1083, 0.0000],
        [1.0000, 0.8760, 0.0067, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.2411, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.5115, 0.0000],
        [0.0000, 0.0000, 1.0000, 1.0000, 0.8275, 0.0000, 0.0000, 0.0000],
        [1.0000, 1.0000, 1.0000, 0.1724, 0.0000, 0.0000, 1.0000, 1.0000],
        [1.0000, 0.5297, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.8251],
        [0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.9203, 0.0258, 0.0000],
        [1.0000, 0.8786, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.1782, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.5607, 0.0000],
        [0.0000, 0.0000, 1.0000, 1.0000, 0.8381, 0.0000, 0.0000, 0.0000],
        [1.0000, 1.0000, 1.0000, 0.1706, 0.0000, 0.0000, 1.0000, 1.0000],
        [1.0000, 0.4769, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.7464],
        [0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.4796, 0.0000, 0.0000],
        [1.0000, 0.8659, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.2334, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.5364, 0.0000],
        [0.0000, 0.0000, 1.0000, 1.0000, 0.8533, 0.0000, 0.0000, 0.0000],
        [1.0000, 1.0000, 1.0000, 0.1505, 0.0000, 0.0000, 1.0000, 1.0000],
        [1.0000, 0.4853, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.5396],
        [0.0000, 0.0000, 1.0000, 1.0000, 0.9095, 0.0909, 0.0000, 0.0000]])
pred_graph = np.array([[4.9854e-01, 2.7459e-02, 4.1271e-04, 4.1807e-06, 1.1844e-07, 1.8162e-08,
         9.2876e-01, 1.2188e-01],
        [8.8260e-04, 9.2967e-06, 2.7952e-07, 4.3297e-08, 9.9240e-01, 5.8911e-01,
         5.0589e-03, 6.4183e-05],
        [1.6124e-06, 2.4286e-07, 9.9872e-01, 9.7220e-01, 4.4651e-02, 4.2519e-04,
         1.4252e-05, 2.4954e-06],
        [9.9989e-01, 9.9959e-01, 4.0417e-01, 2.6208e-03, 1.2184e-04, 2.1989e-05,
         9.9997e-01, 9.9989e-01],
        [9.7503e-01, 2.4875e-02, 6.3752e-04, 1.1733e-04, 9.9999e-01, 9.9998e-01,
         9.9826e-01, 3.6497e-01],
        [2.7296e-03, 4.3087e-04, 1.0000e+00, 9.9999e-01, 9.9941e-01, 8.7950e-01,
         6.4588e-03, 7.1771e-04],
        [4.2332e-01, 3.2967e-02, 3.6754e-04, 3.6285e-06, 1.0457e-07, 1.5374e-08,
         9.0138e-01, 1.1363e-01],
        [8.6297e-04, 8.6877e-06, 2.5606e-07, 3.7095e-08, 9.9205e-01, 5.4845e-01,
         6.9525e-03, 4.8110e-05],
        [1.3410e-06, 1.9096e-07, 9.9917e-01, 9.6937e-01, 6.0487e-02, 3.3133e-04,
         1.1770e-05, 2.0915e-06],
        [9.9993e-01, 9.9972e-01, 5.2807e-01, 2.5763e-03, 9.6875e-05, 1.9156e-05,
         9.9998e-01, 9.9995e-01],
        [9.7642e-01, 4.5447e-02, 5.5745e-04, 1.1121e-04, 1.0000e+00, 9.9999e-01,
         9.9935e-01, 4.8235e-01],
        [2.4739e-03, 3.3578e-04, 1.0000e+00, 9.9999e-01, 9.9967e-01, 9.3348e-01,
         5.7270e-03, 5.3663e-04],
        [5.0488e-01, 5.9991e-02, 4.2724e-04, 3.6115e-06, 7.5044e-08, 1.0290e-08,
         9.4473e-01, 1.7620e-01],
        [1.4619e-03, 9.4529e-06, 2.1225e-07, 2.7069e-08, 9.9500e-01, 7.0026e-01,
         1.3114e-02, 4.7703e-05],
        [1.1335e-06, 1.3881e-07, 9.9939e-01, 9.8657e-01, 8.9756e-02, 3.7207e-04,
         9.8101e-06, 1.5408e-06],
        [9.9994e-01, 9.9977e-01, 5.8449e-01, 4.6378e-03, 7.2517e-05, 1.3140e-05,
         9.9999e-01, 9.9997e-01],
        [9.8660e-01, 5.7203e-02, 3.9312e-04, 7.4816e-05, 1.0000e+00, 9.9999e-01,
         9.9933e-01, 5.5850e-01],
        [1.7522e-03, 1.9030e-04, 1.0000e+00, 1.0000e+00, 9.9974e-01, 8.6025e-01,
         2.7767e-03, 3.0583e-04],
        [5.6413e-01, 7.7432e-02, 6.8414e-04, 3.7563e-06, 9.3815e-08, 1.2663e-08,
         9.5183e-01, 1.8759e-01],
        [2.6241e-03, 1.2131e-05, 2.3690e-07, 2.8843e-08, 9.9609e-01, 7.9537e-01,
         1.9586e-02, 6.8329e-05],
        [1.1277e-06, 1.2264e-07, 9.9954e-01, 9.9086e-01, 1.2910e-01, 5.5796e-04,
         8.8588e-06, 1.1534e-06],
        [9.9994e-01, 9.9978e-01, 6.8814e-01, 5.0263e-03, 7.0943e-05, 1.0418e-05,
         9.9999e-01, 9.9998e-01],
        [9.9317e-01, 5.1005e-02, 3.9535e-04, 5.1455e-05, 1.0000e+00, 9.9999e-01,
         9.9942e-01, 5.3760e-01],
        [1.0090e-03, 1.1106e-04, 1.0000e+00, 1.0000e+00, 9.9976e-01, 5.3528e-01,
         1.2452e-03, 1.4749e-04],
        [6.4667e-01, 1.2451e-01, 1.1787e-03, 5.0779e-06, 9.1794e-08, 1.2454e-08,
         9.6552e-01, 2.6534e-01],
        [4.3415e-03, 1.7223e-05, 2.3580e-07, 2.8042e-08, 9.9621e-01, 8.2799e-01,
         3.2427e-02, 9.9092e-05],
        [1.2833e-06, 1.1657e-07, 9.9951e-01, 9.9315e-01, 1.9704e-01, 8.4840e-04,
         1.0694e-05, 9.8529e-07],
        [9.9989e-01, 9.9951e-01, 7.3548e-01, 6.9776e-03, 8.3668e-05, 8.4251e-06,
         9.9999e-01, 9.9997e-01],
        [9.9386e-01, 4.4387e-02, 3.3710e-04, 3.3750e-05, 1.0000e+00, 9.9999e-01,
         9.9882e-01, 2.6969e-01],
        [6.4217e-04, 7.7446e-05, 1.0000e+00, 1.0000e+00, 9.9947e-01, 1.7385e-01,
         7.1784e-04, 9.5930e-05]])        

ground_truth = np.reshape(ground_truth, (5,8,6,))
pred_graph = np.reshape(pred_graph, (5,8,6,))
pred_TLR = np.reshape(pred_TLR, (5,8,6,))
# get the mse loss between ground truth and pred_graph and pred_TLR
mes_loss_graph = np.mean((ground_truth - pred_graph) ** 2)
mes_loss_TLR = np.mean((ground_truth - pred_TLR) ** 2)
print('mse_loss_graph:', mes_loss_graph)
print('mse_loss_TLR:', mes_loss_TLR)

diff_graph = (ground_truth - pred_graph)**2
diff_TLR = (ground_truth - pred_TLR)**2

diff_graph1 = abs(ground_truth - pred_graph)
diff_TLR1 = abs(ground_truth - pred_TLR)

# calculate the distribution loss between ground truth and pred_graph and pred_TLR
dist_loss_graph = np.mean(np.abs(ground_truth - pred_graph))
dist_loss_TLR = np.mean(np.abs(ground_truth - pred_TLR))
print('dist_loss_graph:', dist_loss_graph)
print('dist_loss_TLR:', dist_loss_TLR)

import open3d as o3d
import numpy as np

# Define the origin, color, and voxel size
origin = np.array([[0], [0], [0]], dtype=np.float64)  # Origin at [0, 0, 0]
color = np.array([[0], [0], [0]], dtype=np.float64)  # White color
voxel_size = 1.0  # Voxel size of 1

# Create the voxel grid
voxel_grid = o3d.geometry.VoxelGrid.create_dense(
    origin=origin,
    color=color,
    voxel_size=voxel_size,
    width=5*voxel_size,
    height=8*voxel_size,
    depth=6*voxel_size
)

import open3d as o3d
import numpy as np

# Create the voxel grid
voxel_grid = o3d.geometry.VoxelGrid.create_dense(origin, color, voxel_size=voxel_size, width=5*voxel_size, height=8*voxel_size, depth=6*voxel_size)

# Create a PointCloud from the VoxelGrid
pcd = o3d.geometry.PointCloud()

# Add the centers of the voxels to the PointCloud
for voxel in voxel_grid.get_voxels():
    pcd.points.append(voxel.grid_index)

# Convert the points to a Vector3dVector
pcd.points = o3d.utility.Vector3dVector(np.asarray(pcd.points))

# Assign colors to the points in the PointCloud
colors = np.zeros((len(pcd.points), 3))
for i in range(len(pcd.points)):
    # colors[i] = ground_truth[int(pcd.points[i][0]), int(pcd.points[i][1]), int(pcd.points[i][2])]
    # colors[i] = pred_graph[int(pcd.points[i][0]), int(pcd.points[i][1]), int(pcd.points[i][2])]
    # colors[i] = pred_TLR[int(pcd.points[i][0]), int(pcd.points[i][1]), int(pcd.points[i][2])]
    # colors[i] = diff_graph[int(pcd.points[i][0]), int(pcd.points[i][1]), int(pcd.points[i][2])]
    # colors[i] = diff_TLR[int(pcd.points[i][0]), int(pcd.points[i][1]), int(pcd.points[i][2])]
    # colors[i] = diff_graph1[int(pcd.points[i][0]), int(pcd.points[i][1]), int(pcd.points[i][2])]
    colors[i] = diff_TLR1[int(pcd.points[i][0]), int(pcd.points[i][1]), int(pcd.points[i][2])]
pcd.colors = o3d.utility.Vector3dVector(colors)

# reverse the color to 1-color
colors = np.ones((len(pcd.points), 3)) - colors
pcd.colors = o3d.utility.Vector3dVector(colors)
coord = o3d.geometry.TriangleMesh.create_coordinate_frame(size=0.5, origin=[-0.5,-0.5,-0.5])

# Create a visualizer object
vis = o3d.visualization.Visualizer()

# Create a window with a specified point size
vis.create_window()

# Add the point cloud and coordinate frame
vis.add_geometry(pcd)
vis.add_geometry(coord)

# Update the point size
render_option = vis.get_render_option()
render_option.point_size = 10.0  # Change this value to adjust the point size


# set lootat, up, front
lookat = np.array([1,3.5,1.5])
front = -np.array([1, 0, 0])
up = np.array([0, 1, 0])
view_control = vis.get_view_control()
view_control.set_lookat(lookat)
view_control.set_front(front)
view_control.set_up(up)
# Run the visualizer
vis.run()

# Close the window
vis.destroy_window()